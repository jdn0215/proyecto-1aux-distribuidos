/*
 * Airplane_Crashes_and_Fatalities_Since_1908
 *
 * Airplane_Crashes_and_Fatalities_Since_1908
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"net/http"
	"path"
	"log"
)


/*
* Delete crash by id
*/
func CrashCrashIdDelete(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	log.Printf("Delete crash "+id+" requested")
	res := removeCrash(id)
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
    w.WriteHeader(http.StatusOK)
}

/*
* Unlink a flight and a crash
*/
func CrashCrashIdFlightFlightIdDelete(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	log.Printf("Delete link with flight "+id+" requested")
	res := unlinkFlight(id)
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
	w.WriteHeader(http.StatusOK)
}

/*
* Get a flight by crash id
*/
func CrashCrashIdFlightGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(path.Dir(r.URL.Path))
	res := getFlightByCrashId(id)
	if res == nil{
		return 
	}
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
	w.WriteHeader(http.StatusOK)
}

/*
* Get a Statistic by crash id
*/
func CrashCrashIdStatisticGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(path.Dir(r.URL.Path))
	res := getStatisticByCrashId(id)
	if res == nil{
		return 
	}
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
	w.WriteHeader(http.StatusOK)
}

/*
* link crash and flight
*/
func CrashCrashIdFlightPost(w http.ResponseWriter, r *http.Request) {
	crashId := path.Base(path.Dir(r.URL.Path))
	var id TemplateId
	err := json.NewDecoder(r.Body).Decode(&id)
	log.Printf("Link " + crashId+" to "+id.Id)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
	}
	res := linkFlight(crashId,id.Id)
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
	w.WriteHeader(http.StatusOK)
}

/*
* Get crash by id
*/
func CrashCrashIdGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
    crash := getCrashById(id);
    if crash == nil {
        return
    }
    dataJson, _ := json.Marshal(crash)
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.Write(dataJson)
    w.WriteHeader(http.StatusOK)
}

/*
* Update crash
*/
func CrashCrashIdPut(w http.ResponseWriter, r *http.Request) {
	var crash Crash
    err := json.NewDecoder(r.Body).Decode(&crash)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
	}
	id := path.Base(r.URL.Path)
	log.Printf("Update crash "+id+" requested")
	res := updateCrash(id,crash);
    dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
    w.WriteHeader(http.StatusOK)
}


/*
* Link crash and Statistic
*/
func CrashCrashIdStatisticPost(w http.ResponseWriter, r *http.Request) {
	crashId := path.Base(path.Dir(r.URL.Path))
	var id TemplateId
    err := json.NewDecoder(r.Body).Decode(&id)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
	}
	res := linkStatistic(crashId,id.Id)
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
	w.WriteHeader(http.StatusOK)
}

/*
* Unlink a flight and a crash
*/
func CrashCrashIdStatisticStatisticIdDelete(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	log.Printf("Delete link with StatisticI "+id+" requested")
	res := unlinkStatistic(id)
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
	w.WriteHeader(http.StatusOK)
}


/*
* Get all crashes
*/
func CrashGet(w http.ResponseWriter, r *http.Request) {
	log.Printf("All crashes requested")
	dataJson, _ := json.Marshal(allCrashes());
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}


/*
* Add Crash to crash Collection
*/
func CrashPost(w http.ResponseWriter, r *http.Request) {
	log.Printf("Create crash requested")
    var crash Crash
    err := json.NewDecoder(r.Body).Decode(&crash)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
	}
	res := addCrash(crash)
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
    w.WriteHeader(http.StatusOK)
}


/*
* delete Flight by id
*/
func FlightFlightIdDelete(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	log.Printf("Delete Flight "+id+" requested")
	res := removeFlight(id)
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
    w.WriteHeader(http.StatusOK)
}

/*
* get flight by id
*/
func FlightFlightIdGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
    flight := getFlightById(id);
    if flight == nil {
        return
    }
    dataJson, _ := json.Marshal(flight)
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.Write(dataJson)
    w.WriteHeader(http.StatusOK)
}


/*
* Update flight
*/
func FlightFlightIdPut(w http.ResponseWriter, r *http.Request) {
	var flight Flight
    err := json.NewDecoder(r.Body).Decode(&flight)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
	}
	id := path.Base(r.URL.Path)
	log.Printf("Update flight "+id+" requested")
	res := updateFlight(id,flight);
    dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
    w.WriteHeader(http.StatusOK)
}


/*
* Get all Flights
*/	
func FlightGet(w http.ResponseWriter, r *http.Request) {
	log.Printf("All Flights requested")
	dataJson, _ := json.Marshal(allFlights());
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}


/*
* Create new Flight
*/
func FlightPost(w http.ResponseWriter, r *http.Request) {
	log.Printf("Create flight requested")
    var flight Flight
    err := json.NewDecoder(r.Body).Decode(&flight)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
	}
	res := addFlight(flight)
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
    w.WriteHeader(http.StatusOK)
}


/*
* Get all Statistics
*/
func StatisticGet(w http.ResponseWriter, r *http.Request) {
	log.Printf("All Statistics requested")
	dataJson, _ := json.Marshal(allStatistics());
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}


/*
* Create new  Statistic
*/
func StatisticPost(w http.ResponseWriter, r *http.Request) {
	log.Printf("Create  Statistic requested")
    var  statistic  Statistic
    err := json.NewDecoder(r.Body).Decode(&statistic)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
	}
	res := addStatistic(statistic)
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
    w.WriteHeader(http.StatusOK)
}


/*
* Remove Statistic
*/
func StatisticStatisticIdDelete(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	log.Printf("Delete Statistic "+id+" requested")
	res := removeStatistic(id)
	dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
    w.WriteHeader(http.StatusOK)
}


/*
* get statistic by id
*/
func StatisticStatisticIdGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	log.Printf("statistic "+id+" requested")
    statistic := getStatisticById(id);
    if statistic == nil {
        return
    }
    dataJson, _ := json.Marshal(statistic)
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.Write(dataJson)
    w.WriteHeader(http.StatusOK)
}


/*
* Update statistic
*/
func StatisticStatisticIdPut(w http.ResponseWriter, r *http.Request) {
	var statistic Statistic
    err := json.NewDecoder(r.Body).Decode(&statistic)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
	}
	id := path.Base(r.URL.Path)
	log.Printf("Update statistic "+id+" requested")
	res := updateStatistic(id,statistic);
    dataJson, _ := json.Marshal(res);
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson);
    w.WriteHeader(http.StatusOK)
}
